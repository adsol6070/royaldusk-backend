// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid())
  name                String   @db.VarChar(255)
  email               String   @unique
  verified            Boolean? @default(false)

  password            String?  
  firebaseUid         String? 
  profileImageUrl     String?

  role                RoleEnumType? @default(user)

  verificationCode    String?  @db.Text @unique
  passwordResetToken  String?
  passwordResetAt     DateTime?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  blogs               Blog[]
  bookings            Booking[]


  @@unique([email, verificationCode, passwordResetToken])
}

model Blog {
  id               String   @id @default(uuid())
  title            String   @db.VarChar(150)
  slug             String   
  authorID         String
  author           User     @relation(fields: [authorID], references: [id])
  categoryID       String
  category         Category @relation(fields: [categoryID], references: [id])
  content          String
  excerpt          String?  @db.Text
  metaTitle        String?  @db.VarChar(150)
  metaDescription  String?  @db.VarChar(300)
  thumbnail        String?  @db.Text
  tags             String[]
  status           BlogStatus @default(draft)
  publishedAt      DateTime? 
  scheduledAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum BlogStatus {
  draft
  published
  archived
}

model Category {
  id    String @id @default(uuid())
  name  String
  blogs Blog[]
}

model PackageCategory {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  packages  Package[]
  tours     Tour[] 
}

model PackageFeature {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  packageFeatures PackageFeatureOnPackage[]
}

model PackageItinerary {
  id          String    @id @default(uuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  packageItineraries PackageItineraryOnPackage[]
}

model PackageService {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  packageServices PackageServiceOnPackage[]
}

model PackagePolicy {
  id                  String   @id @default(uuid())
  bookingPolicy       String
  visaDetail          String
  cancellationPolicy  String
  paymentTerms        String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  packages            Package[]
}

enum PackageTag {
  Regular
  Popular
  Top
}

model Package {
  id                  String    @id @default(uuid())
  name                String
  slug                String
  description         String
  review              Int  @default(0)
  currency            String @default("AED")
  importantInfo       String
  locationId          String
  location            Location @relation(fields: [locationId], references: [id])
  price               Float
  duration            Int
  availability        Availability
  hotels              String
  imageUrl            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  categoryID          String
  category            PackageCategory @relation(fields: [categoryID], references: [id])

  policyID            String?
  policy              PackagePolicy?  @relation(fields: [policyID], references: [id])

  features            PackageFeatureOnPackage[]
  itineraries         PackageItineraryOnPackage[]
  services            PackageServiceOnPackage[]
  enquiries           Enquiry[]
  bookingItems        BookingItem[]

  tag                 PackageTag @default(Regular)
}

model PackageFeatureOnPackage {
  packageId String
  featureId String

  package   Package        @relation(fields: [packageId], references: [id], onDelete: Cascade)
  feature   PackageFeature @relation(fields: [featureId], references: [id])

  @@id([packageId, featureId])
}

model PackageItineraryOnPackage {
  packageId   String
  itineraryId String
  day         Int
  package     Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)
  itinerary   PackageItinerary @relation(fields: [itineraryId], references: [id])

  @@id([packageId, itineraryId, day])
}

model PackageServiceOnPackage {
  packageId String
  serviceId String
  type      ServiceType

  package   Package        @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service   PackageService @relation(fields: [serviceId], references: [id])

  @@id([packageId, serviceId])
}

model Enquiry {
  id           String   @id @default(uuid())
  name         String
  email        String
  isdCode      String
  mobile       String
  dob          DateTime
  adults       Int
  children     Int
  flightBooked String
  remarks      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  packageID    String
  package      Package  @relation(fields: [packageID], references: [id], onDelete: Cascade)
}

model Location {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  imageUrl  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  packages  Package[] 
  tours     Tour[] 
}

model Booking {
  id              String         @id @default(uuid())
  userId          String?
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  guestName       String?
  guestEmail      String?
  guestMobile     String?
  guestNationality String?   

  remarks         String? 
  confirmationPdfPath  String?
  agreedToTerms   Boolean        @default(false) 

  status          BookingStatus  @default(Pending)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  items           BookingItem[]

  payments Payment[]
}

model BookingItem {
  id         String   @id @default(uuid())
  bookingId  String
  packageId  String
  travelers  Int
  startDate  DateTime

  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  package    Package  @relation(fields: [packageId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
}

enum Availability {
  Available
  SoldOut
  ComingSoon
}

enum ServiceType {
  Inclusion
  Exclusion
}

enum RoleEnumType {
  user
  admin
}

model Payment {
  id             String        @id @default(uuid())
  bookingId      String
  booking        Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  provider       PaymentProvider
  method         PaymentMethod
  providerRefId  String        @unique 
  chargeId       String?                   
  receiptUrl     String?                   
  refunded       Boolean?     @default(false) 
  failureCode    String?                   
  failureMessage String?                  
  cardBrand      String?                  
  cardLast4      String?                  

  status         PaymentStatus
  amount         Int
  currency       String

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}


enum PaymentProvider {
  Stripe
  Razorpay
  PayPal
  Cash
  UPI
  BankTransfer
}

enum PaymentMethod {
  Card
  Wallet
  UPI
  NetBanking
  Cash
}

enum PaymentStatus {
  canceled
  pending
  payment_failed
  processing
  succeeded
}

model Tour {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  slug        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  tourAvailability        TourAvailability
  tag         TourTag @default(Regular)  
  imageUrl    String   @db.Text
  categoryId  String
  category    PackageCategory @relation(fields: [categoryId], references: [id])

  locationId  String
  location    Location        @relation(fields: [locationId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TourTag {
  Regular
  Popular
  Top
}
enum TourAvailability {
  Available
  SoldOut
  ComingSoon
}